package krustyKookies;

import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.sql.Timestamp;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import krustyKookies.BookingPane.DateSelectionListener;
import krustyKookies.BookingPane.NameSelectionListener;
import krustyKookies.ProductionPane.ActionHandler;

public class PalletSearchPane extends BasicPane {
	private static final long serialVersionUID = 1;
	private JLabel currentUser;
	private DefaultListModel<String> cookieListModel;
	private JList<String> cookieList;
	private DefaultListModel<Integer> idListModel;
	private JList<Integer> idList;
	private JTextField[] fields;
	private JTextField[] dateFields;

	private static final int ID = 0;
	private static final int COOKIETYPE = 1;
	private static final int LOCATION = 2;
	private static final int DATE = 3;
	private static final int BLOCKED = 4;
	private static final int CUSTOMER_ID = 5;
	private static final int NBR_FIELDS = 6;

	private static final int BDATE = 0;
	private static final int EDATE = 1;
	private static final int CUSTOMER = 2;
	private static final int DATE_NBR_FIELDS = 3;

	public PalletSearchPane(Database db) {
		super(db);
	}

	public JComponent createLeftPanel() {
		cookieListModel = new DefaultListModel<String>();

		cookieList = new JList<String>(cookieListModel);
		cookieList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		cookieList.setPrototypeCellValue("123456789012");
		cookieList.addListSelectionListener(new CookieSelectionListener());
		JScrollPane p1 = new JScrollPane(cookieList);

		idListModel = new DefaultListModel<Integer>();

		idList = new JList<Integer>(idListModel);
		idList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		idList.setPrototypeCellValue(123456);
		idList.addListSelectionListener(new IdSelectionListener());
		JScrollPane p2 = new JScrollPane(idList);

		JPanel p = new JPanel();
		p.setLayout(new GridLayout(1, 2));
		p.add(p1);
		p.add(p2);
		return p;
	}

	public JComponent createTopPanel() {
		String[] texts = new String[DATE_NBR_FIELDS];
		texts[BDATE] = "Starting date";
		texts[EDATE] = "Ending date";
		texts[CUSTOMER] = "Customer id";

		dateFields = new JTextField[DATE_NBR_FIELDS];
		for (int i = 0; i < dateFields.length; i++) {
			dateFields[i] = new JTextField(20);
			dateFields[i].setEditable(true);
		}

		JPanel input = new InputPanel(texts, dateFields);

		JPanel p1 = new JPanel();
		p1.setLayout(new FlowLayout(FlowLayout.LEFT));
		p1.add(new JLabel("Current user: "));
		currentUser = new JLabel("");
		p1.add(currentUser);

		JPanel p = new JPanel();
		p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
		p.add(p1);
		p.add(input);
		return p;
	}

	public JComponent createMiddlePanel() {
		String[] texts = new String[NBR_FIELDS];
		texts[ID] = "ID";
		texts[COOKIETYPE] = "Cookie-type";
		texts[LOCATION] = "Location";
		texts[DATE] = "Production date";
		texts[BLOCKED] = "Blocked";
		texts[CUSTOMER_ID] = "Customer id";

		fields = new JTextField[NBR_FIELDS];
		for (int i = 0; i < fields.length; i++) {
			fields[i] = new JTextField(20);
			fields[i].setEditable(false);
		}

		JPanel input = new InputPanel(texts, fields);

		JPanel p1 = new JPanel();
		p1.setLayout(new FlowLayout(FlowLayout.LEFT));
		p1.add(new JLabel("Current user: "));
		currentUser = new JLabel("");
		p1.add(currentUser);

		JPanel p = new JPanel();
		p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
		p.add(p1);
		p.add(input);
		return p;
	}
	
	public JComponent createBottomPanel(){
		JButton[] buttons = new JButton[1];
		buttons[0] = new JButton("Customer search");
		return new ButtonAndMessagePanel(buttons, messageLabel, new ActionHandler());
	}

	public void entryActions() {
		clearMessage();
		currentUser.setText(CurrentUser.instance().getCurrentUserId());
		fillCookieList();
		clearFields();
	}

	private void fillCookieList() {
		cookieListModel.removeAllElements();
		/* --- insert own code here --- */
		db.getCookies(cookieListModel);
	}

	private void fillIdList(String cookieType, Timestamp bDate, Timestamp eDate) {
		idListModel.removeAllElements();
		db.getIds(idListModel, cookieType, bDate, eDate);
	}

	private void clearFields() {
		for (int i = 0; i < fields.length; i++) {
			fields[i].setText("");
		}
		for (int i = 0; i < dateFields.length; i++) {
			dateFields[i].setText("");
		}
	}

	class CookieSelectionListener implements ListSelectionListener {
		public void valueChanged(ListSelectionEvent e) {
			if (cookieList.isSelectionEmpty()) {
				return;
			}
			if (!CurrentUser.instance().isLoggedIn()) {
				displayMessage("Must login first");
				return;
			}
			Timestamp bDate = Timestamp.valueOf(dateFields[BDATE].getText());
			Timestamp eDate = Timestamp.valueOf(dateFields[EDATE].getText());
			if(bDate == null || eDate == null){
				return;
			}
			String cookieType = cookieList.getSelectedValue();
			/* --- insert own code here --- */
			System.out.println(cookieType + "MU");
			fillIdList(cookieType, bDate, eDate);
		}
	}

	class IdSelectionListener implements ListSelectionListener {
		public void valueChanged(ListSelectionEvent e){
			if(idList.isSelectionEmpty()){
				return;
			}
			if (!CurrentUser.instance().isLoggedIn()) {
				displayMessage("Must login first");
				return;
			}
			int id = idList.getSelectedValue();
			Pallet pallet = db.getPallet(id);
			fields[0].setText(Integer.toString(pallet.getID()));
			fields[1].setText(pallet.getCookieType());
			fields[2].setText(pallet.getLocation());
			fields[3].setText(pallet.getDate());
			fields[4].setText(String.valueOf(pallet.getBlocked()));
			fields[5].setText(db.getCustomerName(pallet.getOrderID()));
		}
	}
}
