package krustyKookies;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextField;

import krustyKookies.BookingPane.ActionHandler;

public class BlockingPane extends BasicPane {
	private static final long serialVersionUID = 1;
	private JLabel currentUser;
	private DefaultListModel<String> cookieListModel;
	private JList<String> cookieList;
	private JTextField[] fields;
	
	private JComboBox bYearList;
	private JComboBox bMonthList;
	private JComboBox bDayList;
	
	private JComboBox eYearList;
	private JComboBox eMonthList;
	private JComboBox eDayList;
	
	private static final int ID = 0;
	private static final int COOKIETYPE = 1;
	private static final int LOCATION = 2;
	private static final int DATE = 3;
	private static final int TIME = 4;
	private static final int NBR_FIELDS = 5;
	
	public BlockingPane(Database db) {
		super(db);
	}
	
	public JComponent createTopPanel(){
		String[] yearStrings = {"None chosen", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017"};
		bYearList = new JComboBox(yearStrings);
		bYearList.setSelectedIndex(0);
		bYearList.addActionListener(new YearActionhandler());
		
		String[] monthStrings = {"None chosen", "January", "February", "March", "April", "May",
				"June", "July", "August", "September", "October", "November", "December"};
		bMonthList = new JComboBox(monthStrings);
		bMonthList.setSelectedIndex(0);
		bMonthList.addActionListener(new MonthActionhandler());
		
		eYearList = new JComboBox(yearStrings);
		eYearList.setSelectedIndex(0);
		eYearList.addActionListener(new YearActionhandler());
		
		eMonthList = new JComboBox(monthStrings);
		eMonthList.setSelectedIndex(0);
		eMonthList.addActionListener(new MonthActionhandler());
	}
	
	public JComponent createRightPanel(){
		String[] texts = new String[NBR_FIELDS];
		texts[ID] = "ID";
		texts[COOKIETYPE] = "Cookie-type";
		texts[LOCATION] = "Location";
		texts[DATE] = "Production date";
		texts[TIME] = "Production time";

		fields = new JTextField[NBR_FIELDS];
		for (int i = 0; i < fields.length; i++) {
			fields[i] = new JTextField(20);
			fields[i].setEditable(false);
		}

		JPanel input = new InputPanel(texts, fields);

		JPanel p1 = new JPanel();
		p1.setLayout(new FlowLayout(FlowLayout.LEFT));
		p1.add(new JLabel("Current user: "));
		currentUser = new JLabel("");
		p1.add(currentUser);

		JPanel p = new JPanel();
		p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));
		p.add(p1);
		p.add(input);
		return p;
	}
	
	public JComponent createBottomPanel(){
		JButton[] buttons = new JButton[1];
		buttons[0] = new JButton("Block pallets");
		return new ButtonAndMessagePanel(buttons, messageLabel, new ActionHandler());
	}
	
	class ActionHandler implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			displayMessage("");
			if (yearList.getSelectedIndex()==0 || dateList.isSelectionEmpty()) {
				return;
			}
			if (!CurrentUser.instance().isLoggedIn()) {
				displayMessage("Must login first");
				return;
			}
			String movieName = nameList.getSelectedValue();
			String date = dateList.getSelectedValue();
			/* --- insert own code here --- */

			int seats = db.bookTicket(movieName, date, CurrentUser.instance().getCurrentUserId());
			fields[3].setText(Integer.toString(seats));

			if (seats == 0) {
				displayMessage("No seats left");
			}

		}
	}
	
	class YearActionHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			
		}
		
	}
}
